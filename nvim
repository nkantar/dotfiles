"==================================================
" Plugins
"-------------------------

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

" color schemes
Plug 'arcticicestudio/nord-vim'
Plug 'cocopon/iceberg.vim'
Plug 'dracula/vim'
Plug 'joshdick/onedark.vim'

Plug 'AlessandroYorba/Alduin'

" Git
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

" misc
Plug 'dense-analysis/ale'
Plug 'gcmt/taboo.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'justinmk/vim-sneak'
Plug 'tpope/vim-commentary'
Plug 'voldikss/vim-floaterm'

" Telescope
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'kyazdani42/nvim-web-devicons'

" Python
Plug 'psf/black'
Plug 'fisadev/vim-isort'

" file types
Plug 'cespare/vim-toml'

" BBCode
Plug 'Winseven4lyf/vim-bbcode'

" frontend
Plug 'prettier/vim-prettier'

Plug 'fladson/vim-kitty'

call plug#end()


"==================================================
" Plugin config
"-------------------------

"----------
" ALE
filetype off
let &runtimepath.=',~/.config/nvim/plugged/ale'
filetype plugin on
" let g:ale_linters = { 'python': ['black', 'flake8', 'mypy'], }
let g:ale_linters = { 'python': ['black', 'flake8', ], }
let g:ale_sign_column_always = 1
let g:ale_statusline_format = ['x%d', '!%d', 'OK']
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
nnoremap <Leader>at :ALEToggle<CR>

"----------
" Black

nnoremap <Leader>bb :Black<CR>

"----------
" floaterm

nnoremap <Leader>ft :FloatermNew<CR>

"----------
" gitgutter

let g:gitgutter_map_keys = 0

"----------
" isort
nnoremap <Leader>is :Isort<CR>
let g:vim_isort_config_overrides = {'profile': 'black'}

"----------
" Plug
nnoremap <Leader>pu :PlugUpdate<CR>

"----------
" Prettier
nnoremap <Leader>pp :Prettier<CR>

"----------
" sneak

let g:sneak#label = 1

"----------
" Telescope
nnoremap <Leader>ff :Telescope find_files<CR>
nnoremap <Leader>fg :Telescope live_grep<CR>
nnoremap <Leader>fb :Telescope buffers<CR>
nnoremap <Leader>fh :Telescope help_tags<CR>
nnoremap <Leader>fc :Telescope git_commits<CR>

"----------
" nvim-treesitter
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained",
  sync_install = false,
  highlight = {
    enable = true,
    additional_vim_regex_highlighting = false,
  },
}
EOF


"==================================================
" Keymappings
"-------------------------

" leader key
nnoremap <Space> <Nop>
map <Space> <Leader>
map <Space><Space> <Leader><Leader>

" config edit/reload
nnoremap <Leader>es :edit $MYVIMRC<CR>
nnoremap <Leader>ss :source $MYVIMRC<CR>

" splits
nnoremap <Leader>vs :vsplit<CR>
nnoremap <Leader>hs :split<CR>
nnoremap <Leader>vn :vnew<CR>
nnoremap <Leader>hn :new<CR>
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" tabs
nnoremap <Leader>tw :tabnew<CR>
nnoremap <Leader>tc :tabclose<CR>
nnoremap <Leader>tn :tabnext<CR>
nnoremap <Leader>tp :tabprevious<CR>
nnoremap <Leader>tr :TabooRename 

" saving and quitting are very common commands
nnoremap <Leader>w :write<CR>
nnoremap <Leader>q :quit<CR>
nnoremap <Leader>x :xit<CR>
nnoremap <Leader>ed :edit<CR>
nnoremap <Leader>ex :Explore<CR>

" paste mode toggle
nnoremap <Leader>pa :set invpaste paste?<CR>

" command shortcut
nnoremap <Leader>; :

" filetype syntax shortcuts
nnoremap <Leader>md :set syntax=markdown<CR>:set filetype=markdown<CR>
nnoremap <Leader>py :set syntax=python<CR>:set filetype=python<CR>
nnoremap <Leader>js :set syntax=javascript<CR>:set filetype=javascript<CR>
nnoremap <Leader>ht :set syntax=html<CR>:set filetype=html<CR>
nnoremap <Leader>hd :set syntax=htmldjango<CR>:set filetype=htmldjango<CR>
nnoremap <Leader>sh :set syntax=sh<CR>:set filetype=sh<CR>

" find TODO comments
nnoremap <Leader>td /TODO<CR>

" clear find highlights
nnoremap <Leader>nh :noh<CR>

" mdut
nnoremap <Leader>mr :!mdut -s reference 
nnoremap <Leader>mi :!mdut -s inline 
nnoremap <Leader>ms :!mdut -s slack 

" enable clean soft line breaks, preferred for prose
nnoremap <Leader>sl :set lbr<CR>

" Python run current file
nnoremap <Leader>pr :!python %<CR>


"==================================================
" Behavior
"-------------------------

syntax on

" line numbers
set number
set relativenumber

set colorcolumn=50,72,88

" highlight cursor line
set cursorline
"
" don't highlight cursor column
set nocursorcolumn

" tabs
set expandtab
set shiftwidth=4
set tabstop=4
set smarttab

" indentation
set laststatus=2
set autoindent
set nosmartindent

" scroll offset
set scrolloff=15

" track external file changes
set autoread

" split directions
set splitbelow
set splitright

" enable external clipboard
set clipboard=unnamed

" swap file update interval
set updatetime=250

" make backspace work like most other apps
set backspace=2

" TODO
"set completeopt-=preview
"set shortmess+=c
"set lazyredraw

" highlight search incrementally
set incsearch
set hlsearch
noh

" always show signcolumn
set signcolumn=yes

" add EOL by default
set noeol

" important for tmux italics
set t_8f=[38;2;%lu;%lu;%lum
set t_8b=[48;2;%lu;%lu;%lum
set t_ZH=[3m
set t_ZR=[23m

" swap settings
" from https://github.com/airblade/dotvim/blob/dd5d7737e39aad5e24c1a4a8c0d115ff2ae7b488/vimrc#L109-L111
set nobackup                      " No backups.
set nowritebackup                 " No backups.
set backupdir=~/.config/nvim/backup
set directory=~/.config/nvim/backup


"==================================================
" Statusline
"-------------------------

function! ReadonlyForStatusline()
    if &readonly == 1
        return "[!]"
    else
        return ""
    endif
endfunction

function! PasteForStatusline()
    if &paste == 1
        return "[p]"
    else
        return ""
    endif
endfunction

function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
    \   '%dW %dE',
    \   all_non_errors,
    \   all_errors
    \)
endfunction

" always show statusline
set laststatus=2

set statusline=

set statusline+=%F                          " file path
set statusline+=\ 
set statusline+=%{ReadonlyForStatusline()}  " readonly ([!])
set statusline+=\ 
set statusline+=%m                          " modified ([+])

set statusline+=%=                          " right-align from here

set statusline+=%{PasteForStatusline()}     " paste ([p])
set statusline+=\ 
set statusline+=[%{LinterStatus()}]         " ALE
set statusline+=\ 
set statusline+=[%{fugitive#head()}]        " Git branch


"==================================================
" File specific behavior
"-------------------------

"----------
" Git

" auto-wrap commit messages at 72
autocmd Filetype gitcommit setlocal spell textwidth=72

" ----------
" Hurl
au BufRead,BufNewFile *.hurl  set filetype=http

" ----------
" Python

function! HighlightPythonDocstringsAsComments()
    syn region Comment start=/"""/ end=/"""/
    syn region Comment start=/'''/ end=/'''/
endfunction
call HighlightPythonDocstringsAsComments()
autocmd BufReadPost *.py call HighlightPythonDocstringsAsComments()
autocmd Filetype python call HighlightPythonDocstringsAsComments()



"==================================================
" Color scheme
"-------------------------

set termguicolors
set background=dark

"colorscheme nord
"colorscheme iceberg
"colorscheme dracula
"colorscheme alduin
colorscheme onedark


"==================================================
" MacVim
"-------------------------

set guifont=RecMonoDuotone-Regular:h18
if has("gui_macvim")
    set lines=60 columns=88
endif


"==================================================
" Emphasize comments
"-------------------------

highlight Comment gui=italic
function! EmphasizeComments()
  if &background ==# "dark"
    hi! Comment cterm=italic ctermfg=255             guifg=#ffffff
    hi! Todo    cterm=italic ctermfg=0   ctermbg=255 guifg=#000000 guibg=#ffffff
  else
    hi! Comment cterm=italic ctermfg=0             guifg=#000000
    hi! Todo    cterm=italic ctermfg=255   ctermbg=0 guifg=#ffffff guibg=#000000
  endif
endfunction
call EmphasizeComments()
