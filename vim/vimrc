"==================================================
" Plugins
"-------------------------

call plug#begin('~/.vim/plugged')

Plug 'airblade/vim-gitgutter'
Plug 'chriskempson/base16-vim'
Plug 'cocopon/iceberg.vim'
Plug 'easymotion/vim-easymotion'
Plug 'jreybert/vimagit'
Plug 'junegunn/vim-emoji'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'justinmk/vim-sneak'
Plug 'mileszs/ack.vim'
Plug 'mtth/scratch.vim'
Plug 'ntpeters/vim-better-whitespace'
Plug 'scrooloose/nerdcommenter'
Plug 'Shougo/unite.vim'
Plug 'Shougo/vimfiler.vim'
Plug 'SirVer/ultisnips'
Plug 'sjl/badwolf'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
Plug 'Valloric/YouCompleteMe'
Plug 'vim-syntastic/syntastic'

Plug 'nkantar/GHT.vim'

"Plug 'terryma/vim-multiple-cursors'
"Plug 'elixir-lang/vim-elixir'
"Plug 'lambdatoast/elm.vim'
"Plug 'junegunn/goyo.vim'
"Plug 'junegunn/limelight.vim'

"Plug 'nkantar/ripgrep.vim'

"Plug 'trevordmiller/nova-vim'
"Plug 'zanglg/nova.vim'
Plug 'nkantar/nova.vim'

call plug#end()


"==================================================
" Filetypes
" TODO clean this up a bit
"-------------------------

autocmd Filetype yaml setlocal ts=2 sts=2 sw=2
set wildignore+=*.pyc
set backupskip=/tmp/*,/private/tmp/*

let b:current_syntax = "gitconfig-local"


"==================================================
" Google
"-------------------------

" Indent Python in the Google way.
" https://google.github.io/styleguide/pyguide.html

setlocal indentexpr=GetGooglePythonIndent(v:lnum)

let s:maxoff = 50 " maximum number of lines to look backwards.

" Commented out for the time being
"function! GetGooglePythonIndent(lnum)

  "" Indent inside parens.
  "" Align with the open paren unless it is at the end of the line.
  "" E.g.
  ""   open_paren_not_at_EOL(100,
  ""                         (200,
  ""                          300),
  ""                         400)
  ""   open_paren_at_EOL(
  ""       100, 200, 300, 400)
  "call cursor(a:lnum, 1)
  "let [par_line, par_col] = searchpairpos('(\|{\|\[', '', ')\|}\|\]', 'bW',
        "\ "line('.') < " . (a:lnum - s:maxoff) . " ? dummy :"
        "\ . " synIDattr(synID(line('.'), col('.'), 1), 'name')"
        "\ . " =~ '\\(Comment\\|String\\)$'")
  "if par_line > 0
    "call cursor(par_line, 1)
    "if par_col != col("$") - 1
      "return par_col
    "endif
  "endif

  "" Delegate the rest to the original function.
  "return GetPythonIndent(a:lnum)

"endfunction

"let pyindent_nested_paren="&sw*2"
"let pyindent_open_paren="&sw*2"


"==================================================
" Behavior
"-------------------------

set expandtab
set shiftwidth=4
set tabstop=4
set smarttab

set laststatus=2
set autoindent
set smartindent

set scrolloff=25

set autoread

" split stuff
set splitbelow
set splitright

set clipboard=unnamed

set updatetime=250

" make backspace work like most other apps
set backspace=2

let g:UltiSnipsExpandTrigger='<c-\>'

set completeopt-=preview

set shell=zsh\ -l

set shortmess+=c

" from https://github.com/airblade/dotvim/blob/dd5d7737e39aad5e24c1a4a8c0d115ff2ae7b488/vimrc#L109-L111
set nobackup                      " No backups.
set nowritebackup                 " No backups.
"set noswapfile                    " No swap files; more hassle than they're worth. | Actually...

" Source: http://stackoverflow.com/a/6404246/151007
let i = 1
" If I have more than 9 windows open I have bigger problems :)
while i <= 9
  execute 'nnoremap <Leader>'.i.' :'.i.'wincmd w<CR>'
  let i = i + 1
endwhile


"==================================================
" Appearance
"-------------------------

set nocompatible              " be iMproved, required
syntax on
set number
colorscheme goodwolf
set relativenumber
set colorcolumn=73,80,100
set cursorline

set hlsearch

let g:gitgutter_sign_column_always = 1
let g:gitgutter_max_signs = 10000

function! PasteForStatusline()
    let paste_status = &paste
    if paste_status == 1
        return " [paste] "
    else
        return ""
    endif
endfunction

set laststatus=2

"hi User1 ctermfg=240 ctermbg=236 cterm=bold

set statusline=

"set statusline+=%1*%{expand('%:h')}/%*
"set statusline+=%t
set statusline+=%F
set statusline+=\ 
set statusline+=%y  " filetype
set statusline+=\ 
set statusline+=%m  " modified flag
set statusline+=\ 

set statusline+=%=  " right-align from now on

set statusline+=%{PasteForStatusline()}

set statusline+=\[%{mode()}\]
set statusline+=\ 
set statusline+=%v  " column number
set statusline+=\:
set statusline+=%l  " row number
set statusline+=\/
set statusline+=%L  " row total
set statusline+=\ 
set statusline+=%{winnr()}

hi StatusLine ctermfg=248 ctermbg=236
hi StatusLineNC ctermfg=240 ctermbg=236

syn region Comment start=/"""/ end=/"""/


"==================================================
" Keymappings
"-------------------------

" <C-c> over Esc
inoremap <Esc> <Nop>

" spacebar makes for a great leader key
nnoremap <Space> <Nop>
map <Space> <Leader>
map <Space><Space> <Leader><Leader>

" necessary for incessant Vim config updates
nnoremap <Leader>ss :source $MYVIMRC<CR>

" hjkl over cursor keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" better movement between splits
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" saving and quitting are very common commands
nnoremap <Leader>w :write<CR>
nnoremap <Leader>q :quit<CR>
nnoremap <Leader>x :xit<CR>

" this is apparently not reliable behavior, but it seems to work for now...
nnoremap <Leader>bda :bufdo bdelete<CR>

nnoremap <Leader>pa :set invpaste paste?<CR>
nnoremap <Leader>; :
nnoremap <Leader>vs :vsplit<CR>
nnoremap <Leader>hs :split<CR>

nnoremap <Leader>vn :vnew<CR>
nnoremap <Leader>hn :new<CR>

nnoremap <Leader>vm :Vmx 
command! -nargs=1 Vmx call g:VimuxRunCommand(<f-args>)<CR>

nnoremap <Leader>goyo :Goyo<CR>
nnoremap <Leader>lime :Limelight<CR>

nnoremap <Leader>md :set syntax=markdown<CR>
nnoremap <Leader>py :set syntax=python<CR>
nnoremap <Leader>js :set syntax=javascript<CR>
nnoremap <Leader>ht :set syntax=html<CR>
nnoremap <Leader>hd :set syntax=htmldjango<CR>
nnoremap <Leader>sh :set syntax=sh<CR>

" find TODO comments
nnoremap <Leader>fr /TODO\:\ Nik\ \-\ remove<CR>
nnoremap <Leader>fn /TODO\:\ Nik<CR>
nnoremap <Leader>fl :noh<CR>

" fzf
nnoremap <Leader>ff :Files<CR>
nnoremap <Leader>fc :Commits<CR>


"==================================================
" Temporary (Insanity)
"-------------------------

set omnifunc=emoji#complete

"set lazyredraw

set termguicolors
set background=dark
set t_8f=[38;2;%lu;%lu;%lum
set t_8b=[48;2;%lu;%lu;%lum

"colorscheme GoodWolf
"colorscheme iceberg

colorscheme nova

" for MacVim
set guioptions=

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"let g:syntastic_quiet_messages = {
    "\ "!level": "errors",
    "\ "type": "style" }

let $FZF_DEFAULT_COMMAND='ag -g ""'

let g:syntastic_python_checkers = ['python', 'flake8']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_flake8_args='--ignore=E1,E2,E3,E4,E5,E6,E7,E8,E9,W1,W2,W3,W4,W5,W6,W7,W8,W9'

highlight Comment cterm=italic

set t_ZH=[3m
set t_ZR=[23m

set noeol

function! JotDown(param)
    exec ":! ~/bin/jotdown" shellescape(a:param)
endfunction
command! -nargs=1 JD call JotDown(<f-args>)
nnoremap <Leader>jd :JD<Space>
