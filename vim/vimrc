"==================================================
" Plugins
"-------------------------

call plug#begin('~/.vim/plugged')

Plug 'Shougo/unite.vim'
Plug 'Shougo/vimfiler.vim'
Plug 'SirVer/ultisnips'
Plug 'Valloric/YouCompleteMe'
Plug 'airblade/vim-gitgutter'
Plug 'editorconfig/editorconfig-vim'
Plug 'ferranpm/vim-isolate'
Plug 'hdima/python-syntax'
Plug 'jreybert/vimagit'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/vim-emoji'
Plug 'justinmk/vim-sneak'
Plug 'metakirby5/codi.vim'
Plug 'mtth/scratch.vim'
Plug 'nkantar/GHT.vim'
Plug 'nkantar/SPI.vim'
Plug 'rizzatti/dash.vim'
Plug 'sbdchd/neoformat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/Css-Pretty'
Plug 'mhinz/vim-startify'
Plug 'w0rp/ale'
Plug 'Yggdroot/indentLine'
Plug 'rhysd/devdocs.vim'

Plug 'google/vim-maktaba'
Plug 'google/vim-codefmt'
"Plug 'google/yapf'
"Plug 'python-mode/python-mode'

" TypeScript
Plug 'HerringtonDarkholme/yats.vim'
Plug 'Quramy/tsuquyomi'
Plug 'prettier/vim-prettier'

Plug 'morhetz/gruvbox'
Plug 'ayu-theme/ayu-vim'

" Plug 'python-rope/ropevim'

call plug#end()


"==================================================
" Filetypes
" TODO clean this up a bit
"-------------------------

autocmd Filetype yaml setlocal ts=2 sts=2 sw=2
set wildignore+=*.pyc
set backupskip=/tmp/*,/private/tmp/*

let b:current_syntax = "gitconfig-local"


"==================================================
" Behavior
"-------------------------

set expandtab
set shiftwidth=4
set tabstop=4
set smarttab

set laststatus=2
set autoindent
set nosmartindent

set scrolloff=15

set autoread

" split stuff
set splitbelow
set splitright

set clipboard=unnamed

set updatetime=250

" make backspace work like most other apps
set backspace=2

set completeopt-=preview

" set shell=zsh\ -l

set shortmess+=c

set incsearch

set lazyredraw

set noeol

set t_8f=[38;2;%lu;%lu;%lum
set t_8b=[48;2;%lu;%lu;%lum

set t_ZH=[3m
set t_ZR=[23m

autocmd Filetype gitcommit setlocal spell textwidth=72

" from https://github.com/airblade/dotvim/blob/dd5d7737e39aad5e24c1a4a8c0d115ff2ae7b488/vimrc#L109-L111
set nobackup                      " No backups.
set nowritebackup                 " No backups.
"set noswapfile                    " No swap files; more hassle than they're worth. | Actually...


"==================================================
" Appearance
"-------------------------

set nocompatible              " be iMproved, required
syntax on
set number
set relativenumber
set colorcolumn=73,80,100,120
set cursorline

set hlsearch
noh

set signcolumn=yes
let g:gitgutter_max_signs = 10000

function! PasteForStatusline()
    let paste_status = &paste
    if paste_status == 1
        return "[p]"
    else
        return ""
    endif
endfunction

function! ReadonlyForStatusline()
    let readonly_status = &readonly
    if readonly_status == 1
        return "[!]"
    else
        return ""
    endif
endfunction

function! GitBranchForStatusline()
    let branch = fugitive#head()
    if branch != ""
        return "[" . fugitive#head() . "]"
    else
        return ""
    endif
endfunction

set laststatus=2

set statusline=

set statusline+=%F                          " file path
set statusline+=\ 
set statusline+=%{ReadonlyForStatusline()}  " readonly ([!])
set statusline+=\ 
set statusline+=%m                          " modified ([+])

set statusline+=%=                          " right-align from here

set statusline+=%{GitBranchForStatusline()} " Git branch

set statusline+=%{PasteForStatusline()}     " paste ([p])
set statusline+=\ 
set statusline+=[%{ALEGetStatusLine()}]     " ALE

function! StripTrailingWhitespace()
    execute '%s/\s\+$//g'
endfunction

au BufReadPost *.py call HighlightPythonDocstringsAsComments()
autocmd Filetype python call HighlightPythonDocstringsAsComments()

autocmd Filetype vim call HighlightVimComments()

autocmd Filetype qf set colorcolumn=

" colors
set termguicolors
set background=dark
" colorscheme gruvbox
let ayucolor="mirage"
colorscheme Ayu

hi! Comment cterm=italic ctermfg=255             guifg=#ffffff
hi! Todo    cterm=italic ctermfg=0   ctermbg=255 guifg=#000000 guibg=#ffffff

function! HighlightPythonDocstringsAsComments()
    syn region Comment start=/"""/ end=/"""/
endfunction

function! HighlightVimComments()
    syn region Comment start=/"/ end=/$/
endfunction

call HighlightPythonDocstringsAsComments()
call HighlightVimComments()

set nocul
set nocursorcolumn

"==================================================
" Keymappings
"-------------------------

" spacebar makes for a great leader key
nnoremap <Space> <Nop>
map <Space> <Leader>
map <Space><Space> <Leader><Leader>

" necessary for incessant Vim config updates
nnoremap <Leader>ss :source $MYVIMRC<CR>

" better movement between splits
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" saving and quitting are very common commands
nnoremap <Leader>w :write<CR>
nnoremap <Leader>q :quit<CR>
nnoremap <Leader>x :xit<CR>
nnoremap <Leader>e :edit<CR>

" this is apparently not reliable behavior, but it seems to work for now...
nnoremap <Leader>bda :bufdo bdelete<CR>

nnoremap <Leader>pa :set invpaste paste?<CR>
nnoremap <Leader>; :
nnoremap <Leader>vs :vsplit<CR>
nnoremap <Leader>hs :split<CR>

nnoremap <Leader>vn :vnew<CR>
nnoremap <Leader>hn :new<CR>

nnoremap <Leader>tw :tabnew<CR>
nnoremap <Leader>tc :tabclose<CR>
nnoremap <Leader>tn :tabnext<CR>
nnoremap <Leader>tp :tabprevious<CR>

" filetype syntax shortcuts
nnoremap <Leader>md :set syntax=markdown<CR>:set filetype=markdown<CR>
nnoremap <Leader>py :set syntax=python<CR>:set filetype=python<CR>
nnoremap <Leader>js :set syntax=javascript<CR>:set filetype=javascript<CR>
nnoremap <Leader>ht :set syntax=html<CR>:set filetype=html<CR>
nnoremap <Leader>hd :set syntax=htmldjango<CR>:set filetype=htmldjango<CR>
nnoremap <Leader>sh :set syntax=sh<CR>:set filetype=sh<CR>

" find TODO comments
nnoremap <Leader>td /TODO<CR>

" clear find highlights
nnoremap <Leader>nh :noh<CR>

" fzf
nnoremap <Leader>ff :Files<CR>
nnoremap <Leader>fc :Commits<CR>
nnoremap <Leader>ft :Tags<CR>
nnoremap <Leader>fb :BTags<CR>
nnoremap <Leader>fl :BLines<CR>

" Vimagit
nnoremap <Leader>mg :Magit<CR>

" tyop (aka slow fingers)
command! Q quit


"==================================================
" Plugin config
"-------------------------

" mhinz/vim-startify
let g:startify_change_to_dir = 0

" SirVer/ultisnips
let g:UltiSnipsExpandTrigger='<c-\>'

" tpope/vim-markdown
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']

" w0rp/ale
filetype off
let &runtimepath.=',~/.vim/bundle/ale'
filetype plugin on
let g:ale_linters = { 'python': ['flake8'], }
let g:ale_sign_column_always = 1
let g:ale_statusline_format = ['x%d', '!%d', 'OK']
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_set_loclist = 1
let g:ale_open_list = 1

" justinmk/vim-sneak
let g:sneak#label = 1

" hdima/python-syntax
let python_highlight_all=1

" python-rope/ropevim
let g:ropevim_global_prefix = '<Leader>rp'
let g:ropevim_local_prefix = '<Leader>rr'
