"==================================================
" Plugins
"-------------------------

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'airblade/vim-gitgutter'
Plug 'cespare/vim-toml'
Plug 'editorconfig/editorconfig-vim'
Plug 'gcmt/taboo.vim'
Plug 'jremmen/vim-ripgrep'
Plug 'jreybert/vimagit'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'justinmk/vim-sneak'
Plug 'prettier/vim-prettier', { 'do': 'npm install', 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html'] }
Plug 'psf/black', { 'tag': '19.10b0' }
Plug 'rakr/vim-one'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-markdown'
Plug 'w0rp/ale'

Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

Plug 'hashivim/vim-terraform'

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

call plug#end()


"==================================================
" Behavior
"-------------------------

set expandtab
set shiftwidth=2
set tabstop=2
set smarttab

set laststatus=2
set autoindent
set nosmartindent

set scrolloff=15

set autoread

" split stuff
set splitbelow
set splitright

set clipboard=unnamed

set updatetime=250

" make backspace work like most other apps
set backspace=2

set completeopt-=preview

set shortmess+=c

set incsearch

set lazyredraw

set noeol

set t_8f=[38;2;%lu;%lu;%lum
set t_8b=[48;2;%lu;%lu;%lum

set t_ZH=[3m
set t_ZR=[23m

autocmd Filetype gitcommit setlocal spell textwidth=72

" from https://github.com/airblade/dotvim/blob/dd5d7737e39aad5e24c1a4a8c0d115ff2ae7b488/vimrc#L109-L111
set nobackup                      " No backups.
set nowritebackup                 " No backups.

" backup
set backupdir=~/.vim/backup
" swap files
set directory=~/.vim/backup

" netrw
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_list_hide= '__pycache__,.pytest_cache'


"==================================================
" Filetypes
" TODO clean this up a bit
"-------------------------

autocmd Filetype ts,js,json,tf setlocal ts=2 sts=2 sw=2
set wildignore+=*.pyc
set backupskip=/tmp/*,/private/tmp/*

let b:current_syntax = "gitconfig-local"


"==================================================
" Appearance
"-------------------------

set nocompatible              " be iMproved, required
syntax on
set number
set relativenumber
set colorcolumn=50,72,88
set cursorline

set hlsearch
noh

set signcolumn=yes
let g:gitgutter_max_signs = 10000

function! PasteForStatusline()
    let paste_status = &paste
    if paste_status == 1
        return "[p]"
    else
        return ""
    endif
endfunction

function! ReadonlyForStatusline()
    let readonly_status = &readonly
    if readonly_status == 1
        return "[!]"
    else
        return ""
    endif
endfunction

function! GitBranchForStatusline()
    let branch = fugitive#head()
    if branch != ""
        return "[" . fugitive#head() . "]"
    else
        return ""
    endif
endfunction

function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
    \   '%dW %dE',
    \   all_non_errors,
    \   all_errors
    \)
endfunction

set laststatus=2

set statusline=

set statusline+=%F                          " file path
set statusline+=\ 
set statusline+=%{ReadonlyForStatusline()}  " readonly ([!])
set statusline+=\ 
set statusline+=%m                          " modified ([+])

set statusline+=%=                          " right-align from here

set statusline+=%{GitBranchForStatusline()} " Git branch

set statusline+=%{PasteForStatusline()}     " paste ([p])
set statusline+=\ 
" set statusline+=[%{ALEGetStatusLine()}]     " ALE
set statusline+=%{LinterStatus()}

function! StripTrailingWhitespace()
    execute '%s/\s\+$//g'
endfunction

au BufReadPost *.py call HighlightPythonDocstringsAsComments()
autocmd Filetype python call HighlightPythonDocstringsAsComments()

autocmd Filetype vim call HighlightVimComments()

autocmd Filetype qf set colorcolumn=

" colors
set termguicolors
set background=dark
colorscheme one
" colorscheme dracula

function! EmphasizeComments()
  if &background ==# "dark"
    hi! Comment cterm=italic ctermfg=255             guifg=#ffffff
    hi! Todo    cterm=italic ctermfg=0   ctermbg=255 guifg=#000000 guibg=#ffffff
  else
    hi! Comment cterm=italic ctermfg=0             guifg=#000000
    hi! Todo    cterm=italic ctermfg=255   ctermbg=0 guifg=#ffffff guibg=#000000
  endif
endfunction

function! HighlightPythonDocstringsAsComments()
    syn region Comment start=/"""/ end=/"""/
    syn region Comment start=/'''/ end=/'''/
endfunction

function! HighlightVimComments()
    syn region Comment start=/"/ end=/$/
endfunction

call EmphasizeComments()
call HighlightPythonDocstringsAsComments()
call HighlightVimComments()

function! GoLight()
  set background=light
  call EmphasizeComments()
endfunction

function! GoDark()
  set background=dark
  call EmphasizeComments()
endfunction

function! ToggleDarkLight()
  if &background ==# "dark"
    call GoLight()
  else
    call GoDark()
  endif
endfunction

set nocul
set nocursorcolumn


"==================================================
" Keymappings
"-------------------------

" spacebar makes for a great leader key
nnoremap <Space> <Nop>
map <Space> <Leader>
map <Space><Space> <Leader><Leader>

" necessary for incessant Vim config updates
nnoremap <Leader>ss :source $MYVIMRC<CR>

" better movement between splits
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" saving and quitting are very common commands
nnoremap <Leader>w :write<CR>
nnoremap <Leader>q :quit<CR>
nnoremap <Leader>x :xit<CR>
nnoremap <Leader>e :edit<CR>

" this is apparently not reliable behavior, but it seems to work for now...
nnoremap <Leader>bda :bufdo bdelete<CR>

nnoremap <Leader>pa :set invpaste paste?<CR>
nnoremap <Leader>; :
nnoremap <Leader>vs :vsplit<CR>
nnoremap <Leader>hs :split<CR>

nnoremap <Leader>vn :vnew<CR>
nnoremap <Leader>hn :new<CR>

nnoremap <Leader>tw :tabnew<CR>
nnoremap <Leader>tc :tabclose<CR>
nnoremap <Leader>tn :tabnext<CR>
nnoremap <Leader>tp :tabprevious<CR>
nnoremap <Leader>tr :TabooRename 

" filetype syntax shortcuts
nnoremap <Leader>md :set syntax=markdown<CR>:set filetype=markdown<CR>
nnoremap <Leader>py :set syntax=python<CR>:set filetype=python<CR>
nnoremap <Leader>js :set syntax=javascript<CR>:set filetype=javascript<CR>
nnoremap <Leader>ht :set syntax=html<CR>:set filetype=html<CR>
nnoremap <Leader>hd :set syntax=htmldjango<CR>:set filetype=htmldjango<CR>
nnoremap <Leader>sh :set syntax=sh<CR>:set filetype=sh<CR>

" find TODO comments
nnoremap <Leader>td /TODO<CR>

" clear find highlights
nnoremap <Leader>nh :noh<CR>

" colors
nnoremap <Leader>l :call ToggleDarkLight()<CR>

" netrw
nnoremap <Leader>ne :e .<CR>

" ALE
nnoremap <Leader>ad :ALEDetail<CR>
nnoremap <Leader>at :ALEToggle<CR>

" fzf
nnoremap <Leader>ff :Files<CR>
nnoremap <Leader>fc :Commits<CR>
nnoremap <Leader>ft :Tags<CR>
nnoremap <Leader>fb :BTags<CR>
nnoremap <Leader>fl :BLines<CR>

" Vimagit
nnoremap <Leader>mg :MagitOnly<CR>

" vim-plug
nnoremap <Leader>pu :PlugUpdate<CR>

" tyop (aka slow fingers)
command! Q quit


"==================================================
" MacVim
"-------------------------
set guifont=Mononoki:h14
if has("gui_macvim")
    set lines=48 columns=120
endif


"==================================================
" Plugin config
"-------------------------

" w0rp/ale
filetype off
let &runtimepath.=',~/.vim/bundle/ale'
filetype plugin on
let g:ale_linters = { 'python': ['flake8', 'mypy'], }
let g:ale_sign_column_always = 1
let g:ale_statusline_format = ['x%d', '!%d', 'OK']
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0

" justinmk/vim-sneak
let g:sneak#label = 1

" Shougo/deoplete.nvim
let g:deoplete#enable_at_startup = 1

" Black
autocmd BufWritePre *.py execute ':Black'
let g:black_virtualenv="~/.vim_black"

" Prettier
" autocmd BufWritePre *.html execute ':Prettier'
" autocmd BufWritePre *.scss execute ':Prettier'
